import os
import sys
from typing import List
from .commands import *
from ..docker_image import DockerImage
import traceback
import re

_current_executor = None

class SandfileExecutor:
    def __init__(self, path, env: dict = {}):
        # Create environment for executing Sandfile
        self.env = env
        self.path = path
        
        self._commands: list[Command] = []
        self._images: list[DockerImage] = []

    def execute(self) -> List[DockerImage]:
        global _current_executor
        
        # Read Sandfile from disk
        with open(self.path, "r") as f:
            sandfile_contents = f.read()
        
        # Save the current executor
        prev_executor = _current_executor
        _current_executor = self

        # Execute Sandfile
        try:
            exec(sandfile_contents, self.env)
        except Exception as e:
            self.print_sandfile_exception(e)
            raise e

        # Restore the previous executor
        _current_executor = prev_executor

        # Generate Dockerfile
        dockerfile = "# syntax = docker/dockerfile:1\n" # Support BuildKit
        dockerfile += "# Auto-generated by Sand, do not edit!\n"
        for command in self._commands:
            dockerfile += command.serialize() + "\n"

        if len(self._commands) > 0 and not isinstance(self._commands[0], FromCommand):
            raise Exception("Sandfile must start with an image command")
        elif len(self._commands) == 0:
            return self._images

        from_command = self._commands[0]
        dockerfile_path = f"{os.path.dirname(self.path)}/Dockerfile"
        self._images.append(DockerImage(from_command.image, dockerfile_path, dockerfile))
        ret = self._images
        self._images = []
        return ret

    def print_sandfile_exception(self, e: Exception):
        print(f"Error while executing Sandfile: {e}")
        tb = sys.exc_info()[2].tb_next
        print(f'  File "{self.path}", line {tb.tb_lineno} in {tb.tb_frame.f_code.co_name}')
        tb = tb.tb_next
        while tb:
            print(f'  line {tb.tb_lineno} in {tb.tb_frame.f_code.co_name}')
            tb = tb.tb_next
