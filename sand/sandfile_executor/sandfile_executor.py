import os
import sys
from .commands import *
from ..docker_image import DockerImage
import traceback
import re

_current_executor = None
def _sand(path: str):
    subsand = SandfileExecutor(_current_executor.env.copy())
    _current_executor._images.extend(subsand.execute(f"{path}/Sandfile"))

def _run(command: str | list[str]):
    if isinstance(command, list):
        for cmd in command:
            _current_executor._commands.append(RunCommand(cmd))
    elif isinstance(command, str):
        _current_executor._commands.append(RunCommand(command))
    else:
        raise Exception("Invalid type in run command")

def _copy(*args, **kwargs):
    _current_executor._commands.append(CopyCommand(*args, **kwargs))

def _entrypoint(*args, **kwargs):
    _current_executor._commands.append(EntrypointCommand(*args, **kwargs))

def _from(*args, **kwargs):
    _current_executor._commands.append(FromCommand(*args, **kwargs))

class SandfileExecutor:
    def __init__(self, env: dict = {}):
        # Create environment for executing Sandfile
        self.env = env
        self.env.update({
            "Run": _run,
            "Copy": _copy,
            "Entrypoint": _entrypoint,
            "Sand": _sand,
            "From": _from,
            # "config": type("Config", (object,), {"DEBUG": False}),
            # "run_config": type("RunConfig", (object,), {"ports": "", "volumes": ""}),
        })
        
        # __builtins__.update(self.env)
        self._commands: list[Command] = []
        self._images: list[DockerImage] = []

    def execute(self, sandfile_path) -> str:
        global _current_executor
        
        # Read Sandfile from disk
        with open(sandfile_path, "r") as f:
            sandfile_contents = f.read()
        try:
            # Save the current executor
            prev_executor = _current_executor
            _current_executor = self

            # Execute Sandfile
            exec(sandfile_contents, self.env)

            # Restore the previous executor
            _current_executor = prev_executor
        except Exception as e:
            print("Error while executing Sandfile:")
            traceback.print_exc()
            sys.exit(1)

        # Generate Dockerfile
        dockerfile = f"# Auto-generated by Sand, do not edit!\n"
        for command in self._commands:
            dockerfile += command.serialize() + "\n"

        if len(self._commands) > 0 and not isinstance(self._commands[0], FromCommand):
            raise Exception("Sandfile must start with an image command")
        elif len(self._commands) == 0:
            return self._images

        from_command = self._commands[0]
        dockerfile_path = f"{os.path.dirname(sandfile_path)}/Dockerfile"
        self._images.append(DockerImage(from_command.image, dockerfile_path, dockerfile))
        return self._images
