import os
import sys
from .commands import *
from docker_image import DockerImage
import traceback

_current_executor = None
def _sand(path: str):
    subsand = SandfileExecutor(_current_executor.env.copy())
    docker_image = subsand.execute(f"{path}/Sandfile")
    if docker_image:
        docker_image.save(f"{path}/Dockerfile")

def _image(name, from_image, tag):
    _current_executor._commands.append(FromCommand(from_image, tag))

def _run(command: str | list[str]):
    if isinstance(command, list):
        for cmd in command:
            _current_executor._commands.append(RunCommand(cmd))
    elif isinstance(command, str):
        _current_executor._commands.append(RunCommand(command))
    else:
        raise Exception("Invalid type in run command")

def _copy(src, dst):
    _current_executor._commands.append(CopyCommand(src, dst))

def _entrypoint(command):
    _current_executor._commands.append(EntrypointCommand(command))


class SandfileExecutor:

    def __init__(self, env: dict = {}):
        # Create environment for executing Sandfile
        self.env = env
        self.env.update({
            "image": _image,
            "run": _run,
            "copy": _copy,
            "entrypoint": _entrypoint,
            "sand": _sand,
            # "config": type("Config", (object,), {"DEBUG": False}),
            # "run_config": type("RunConfig", (object,), {"ports": "", "volumes": ""}),
        })
        
        # __builtins__.update(self.env)
        self._commands: list[Command] = []

    def execute(self, sandfile_path) -> str:
        global _current_executor
        # Read Sandfile from disk
        with open(sandfile_path, "r") as f:
            sandfile_contents = f.read()

        try:
            sys.path.append(os.path.dirname(sandfile_path))
            sys.path.append(os.getcwd())

            prev_executor = _current_executor
            _current_executor = self
            exec(sandfile_contents, self.env)
            _current_executor = prev_executor
        except Exception as e:
            print("Error while executing Sandfile:")
            traceback.print_exc()
            sys.exit(1)

        # Generate Dockerfile
        dockerfile = f"# Auto-generated by Sand, do not edit!\n"

        for command in self._commands:
            dockerfile += command.serialize() + "\n"

        if len(self._commands) > 0 and not isinstance(self._commands[0], FromCommand):
            raise Exception("Sandfile must start with an image command")
        elif len(self._commands) == 0:
            return

        from_command = self._commands[0]
        return DockerImage(from_command.image, dockerfile)
