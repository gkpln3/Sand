
from docker_image import DockerImage


class SandfileExecutor:
    def __init__(self):
        # Create environment for executing Sandfile
        self.env = {
            "image": self._image,
            "run": self._run,
            "copy": self._copy,
            "entrypoint": self._entrypoint,
            "config": type("Config", (object,), {"DEBUG": False}),
            "run_config": type("RunConfig", (object,), {"ports": "", "volumes": ""})
        }
        self.entrypoint = None

    def _image(self, name, from_image, tag):
        self.image_name = name
        self.image_from = from_image
        self.image_tag = tag

    def _run(self, command):
        self.install_commands.append(command)

    def _copy(self, src, dst):
        self.copy_commands.append((src, dst))

    def _entrypoint(self, command):
        self.entrypoint = command

    def _generate_copy_commands(self):
        copy_commands = ""
        for src, dst in self.copy_commands:
            copy_commands += f"COPY {src} {dst}\n"
        return copy_commands

    def execute(self, sandfile_path) -> str:
        # Read Sandfile from disk
        with open(sandfile_path, "r") as f:
            sandfile_contents = f.read()

        # Set up environment
        self.install_commands = []
        self.copy_commands = []
        exec(sandfile_contents, self.env)

        # Generate Dockerfile
        dockerfile_template = """# Image for {image_name}
# Auto-generated by Sand, do not edit!
FROM {image_from}:{image_tag}
"""
        if len(self.install_commands) > 0:
            dockerfile_template += """
# Install dependencies
RUN {install_commands}
"""

        if len(self.copy_commands) > 0:
            dockerfile_template += """
# Copy app source code
{copy_commands}
"""
        if self.entrypoint is not None:
            dockerfile_template += """
# Set the entrypoint
ENTRYPOINT {entrypoint}
"""

        if self.env["run_config"].ports != "":
            dockerfile_template += """
# Expose ports and mount volumes
EXPOSE {ports}
"""
        if self.env["run_config"].volumes != "":
            dockerfile_template += """
VOLUME {volumes}
"""

        dockerfile = dockerfile_template.format(
            image_name=self.image_name,
            image_from=self.image_from,
            image_tag=self.image_tag,
            install_commands=" \\\n    && ".join(self.install_commands),
            copy_commands=self._generate_copy_commands(),
            entrypoint=self.entrypoint,
            ports=self.env["run_config"].ports,
            volumes=self.env["run_config"].volumes
        )

        return DockerImage(self.image_name, dockerfile)
