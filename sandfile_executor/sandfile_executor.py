import os
import sys
from .commands import *
from docker_image import DockerImage
import traceback

class SandfileExecutor:

    def __init__(self):
        # Create environment for executing Sandfile
        self.env = {
            "image": self._image,
            "run": self._run,
            "copy": self._copy,
            "entrypoint": self._entrypoint,
            "config": type("Config", (object,), {"DEBUG": False}),
            "run_config": type("RunConfig", (object,), {"ports": "", "volumes": ""}),
            # "__builtins__": self.__builtins__
        }
        __builtins__.update(self.env)
        self._commands: list[Command] = []

    def _image(self, name, from_image, tag):
        self._commands.append(FromCommand(from_image, tag))

    def _run(self, command: str | list[str]):
        if isinstance(command, list):
            for cmd in command:
                self._commands.append(RunCommand(cmd))
        elif isinstance(command, str):
            self._commands.append(RunCommand(command))
        else:
            raise Exception("Invalid type in run command")

    def _copy(self, src, dst):
        self._commands.append(CopyCommand(src, dst))

    def _entrypoint(self, command):
        self._commands.append(EntrypointCommand(command))

    def execute(self, sandfile_path) -> str:
        # Read Sandfile from disk
        with open(sandfile_path, "r") as f:
            sandfile_contents = f.read()

        try:
            sys.path.append(os.path.dirname(sandfile_path))
            sys.path.append(os.getcwd())
            exec(sandfile_contents, self.env, self.env)
        except Exception as e:
            print("Error while executing Sandfile:")
            traceback.print_exc()
            sys.exit(1)
            

        # Generate Dockerfile
        dockerfile = f"# Auto-generated by Sand, do not edit!\n"

        for command in self._commands:
            dockerfile += command.serialize() + "\n"

        if not isinstance(self._commands[0], FromCommand):
            raise Exception("Sandfile must start with an image command")

        from_command = self._commands[0]
        return DockerImage(from_command.image, dockerfile)
